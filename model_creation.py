import streamlit as st
from pycaret import regression
from pycaret import classification
from pycaret import clustering
import pickle
import shap


def create_classification(df):
    """perform classification on the data using pycaret.

    Parameters
    ----------
    df : pd.DataFrame
        the dataframe to be used for modeling
    """
    if df is None:
        st.error("Error: 'df' is not defined.")
    else:
        target = st.selectbox("Select your Target", df.columns)
        classification.setup(df, target=target)
        setup_df = classification.pull()
        if "setup_df" in locals():
            st.info("ML Experiment setup")
            st.dataframe(setup_df)
        else:
            st.warning("No data available for display")
        best_model = classification.compare_models()
        compare_df = classification.pull()
        if "compare_df" in locals():
            st.info("ML Model generated")
            st.dataframe(compare_df)
        else:
            st.warning("No model to display.")
        if best_model is not None:
            try:
                classification.save_model(best_model, "output/best_model")
            except Exception as e:
                st.error(f"Error saving the model: {str(e)}")


def create_regression(df):
    """Performs regression on the data using pycaret.

    Parameters
    ----------
    df : pd.DataFrame
        the dataframe to be used for modeling
    """
    if df is None:
        st.error("Error: 'df' is not defined.")
    else:
        target = st.selectbox("Select your Target", df.columns)
        regression.setup(df, target=target)
        setup_df = regression.pull()
        if "setup_df" in locals():
            st.info("ML Experiment setup")
            st.dataframe(setup_df)
        else:
            st.warning("No data available for display")
        best_model = regression.compare_models()
        compare_df = regression.pull()
        if "compare_df" in locals():
            st.info("ML Model generated")
            st.dataframe(compare_df)
        else:
            st.warning("No model to display.")
        if best_model is not None:
            try:
                regression.save_model(best_model, "output/best_model")
            except Exception as e:
                st.error(f"Error saving the model: {str(e)}")


def create_clustering(df):
    """perform clustering on the data using pycaret.

    Parameters
    ----------
    df : pd.DataFrame
        the dataframe to be used for modeling
    """
    if df is None:
        st.error("Error: 'df' is not defined.")
    else:
        target = st.selectbox("Select your Target", df.columns)
        clustering.setup(df, target=target)
        setup_df = clustering.pull()
        if "setup_df" in locals():
            st.info("ML Experiment setup")
            st.dataframe(setup_df)
        else:
            st.warning("No data available for display")
        best_model = clustering.compare_models()
        compare_df = clustering.pull()
        if "compare_df" in locals():
            st.info("ML Model generated")
            st.dataframe(compare_df)
        else:
            st.warning("No model to display.")
        if best_model is not None:
            try:
                clustering.save_model(best_model, "output/best_model")
            except Exception as e:
                st.error(f"Error saving the model: {str(e)}")


def model_explanation():
    """Explains the best model generated by the ML task."""
    with open("output/best_model.pkl", "rb") as f:
        model = pickle.load(f)

    # Assuming you have a DataFrame `X` for your features
    # X = pd.DataFrame(...)

    # Get feature importance
    feature_importance = pd.DataFrame({"feature": X.columns, "importance": model.feature_importances_}).sort_values(
        "importance", ascending=False
    )

    # Use SHAP to explain the model's predictions
    explainer = shap.TreeExplainer(model)
    shap_values = explainer.shap_values(X)

    shap.summary_plot(shap_values, X, plot_type="bar")


def download_model():
    """Downloads the best model generated by the ML task."""
    with open("output/best_model.pkl", "rb") as f:
        st.download_button("Download Model", f, file_name="output/best_model.pkl")
